{"version":3,"sources":["media/images/questionMark.png","Components/Card.js","Helpers/getRandom.js","Components/Cards.js","Components/Game.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","sprite","setSprite","loaded","setLoaded","useEffect","fetch","url","then","res","json","data","sprites","other","front_default","onClick","clickHandler","className","src","alt","name","questionMark","getRandom","arr","n","result","Array","len","length","taken","RangeError","x","Math","floor","random","Cards","cardList","setCardList","cards","setCards","clickedCards","setClickedCards","score","setScore","cardClick","e","cardName","preventDefault","includes","clicked","push","map","card","Game","gameCards","setGameCards","results","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.659c6207.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/questionMark.bdcc1b19.png\";","import React, { useEffect, useState } from \"react\";\nimport \"../css/Card.css\";\nimport questionMark from \"../media/images/questionMark.png\";\n\nfunction Card(props) {\n  let [sprite, setSprite] = useState(null);\n  let [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch(props.url)\n      .then((res) => res.json())\n      .then((data) => {\n        setSprite(data.sprites.other[\"official-artwork\"].front_default);\n      });\n  });\n\n  useEffect(() => {\n    if (sprite) {\n      setLoaded(true);\n    }\n  }, [sprite]);\n\n  return (\n    <div onClick={props.clickHandler} className=\"pokeCard\">\n      {loaded ? (\n        <div className=\"pokeMon\">\n          <img className=\"pokeSprite\" src={sprite} alt={props.name}/>\n          <h5 className=\"pokeName\">{props.name}</h5>\n        </div>\n      ) : (\n          <div className=\"pokeMon\">\n            <img className=\"pokeSprite\" src={questionMark} alt=\"Who's that pokemon!\"/>\n            <h5 className=\"pokeName\">Loading...</h5>\n          </div>\n      )}\n    </div>\n  );\n}\n\nexport default Card;\n","function getRandom(arr, n) {\n    let result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        let x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\nexport default getRandom;","import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport getRandom from \"../Helpers/getRandom\";\nimport \"../css/Cards.css\";\n\n\nfunction Cards(props) {\n  let [cardList, setCardList] = useState(null);\n  let [cards, setCards] = useState(null);\n  let [clickedCards, setClickedCards] = useState([]);\n  let [score, setScore] = useState(0);\n\n  function cardClick(e, cardName) {\n    e.preventDefault();\n\n    if(clickedCards.includes(cardName)) {\n      setScore(0);\n      setClickedCards([]);\n    } else {\n      setScore(score+1);\n\n      let clicked = clickedCards;\n      clicked.push(cardName);\n      setClickedCards(clicked);\n    }\n\n    if(cards) {\n      setCards(getRandom(props.cardList, 10));\n    }\n  }\n\n  useEffect(() => {\n    if(cards) {\n      setCardList(\n          cards.map((card) => (\n              <Card key={card.name} name={card.name} url={card.url} clickHandler={e => cardClick(e, card.name)}/>\n          ))\n      );\n    }\n  }, [cards]);\n\n  useEffect(() => {\n    setCardList(\n      props.cardList.map((card) => (\n        <Card key={card.name} name={card.name} url={card.url} clickHandler={e => cardClick(e)}/>\n      ))\n    );\n\n    setCards(props.cardList);\n  }, [props.cardList]);\n\n  return (\n      <div className=\"cardsContainer\">\n        {score===10? \"You won!\": null}\n        <h1>{score}/10</h1>\n        {cardList ? cardList : null}\n      </div>);\n}\n\nexport default Cards;\n","import React, { useEffect, useState } from \"react\";\nimport Cards from \"./Cards\";\nimport getRandom from \"../Helpers/getRandom\";\n\nfunction Game() {\n  let [gameCards, setGameCards] = useState(null);\n  let [cardList, setCardList] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=30/\")\n      .then((res) => res.json())\n      .then((data) => {\n        setGameCards(data.results);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (gameCards) {\n      setCardList(getRandom(gameCards, 10));\n    }\n  }, [gameCards]);\n\n  return (<div>{cardList ? <Cards cardList={cardList}/> : \"Loading...\"}</div>);\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./Game\";\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}